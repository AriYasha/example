<%--
  Created by IntelliJ IDEA.
  User: ирина
  Date: 15.05.2019
  Time: 14:33
  To change this template use File | Settings | File Templates.
--%>
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<html>
<head>
    <!-- set the encoding of your site -->
    <meta charset="utf-8">
    <!-- set the viewport width and initial-scale on mobile devices -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- set the HandheldFriendly -->
    <meta name="HandheldFriendly" content="True">
    <!-- set the description -->
    <meta name="description" content="STUDYLMS HTML Template">
    <!-- set the Keyword -->
    <meta name="keywords" content="">
    <meta name="author" content="STUDYLMS HTML Template">
    <!-- set the page title -->
    <title>БНТУ HTML Template</title>
    <!-- include google roboto font cdn link -->
    <link href="https://fonts.googleapis.com/css?family=Lato:300,300i,400,400i,700,700i%7COpen+Sans:300,300i,400,400i,600,600i,700,700i"
          rel="stylesheet">
    <!-- include the site bootstrap stylesheet -->
    <link rel="stylesheet" href="resources/css/bootstrap.css">
    <title>Title</title>


    <!-- include the site stylesheet -->
    <link rel="stylesheet" href="resources/css/plugins.css">
    <!-- include the site stylesheet -->
    <link rel="stylesheet" href="resources/css/colors.css">
    <!-- include the site stylesheet -->
    <link rel="stylesheet" href="resources/style.css">
    <!-- include the site responsive stylesheet -->
    <link rel="stylesheet" href="resources/css/responsive.css">

    <style>
        .bold{
            color: #303F9F;
            font-size: 120%;

        }
        .bold1 {
            color: #0f0f0f;
            font-size: 150%;
        }
        a{
            line-height:1.5em;
        }


    </style>
</head>
<body>
<!-- main container of all the page elements -->
<div id="wrapper">
    <!-- header of the page -->
    <header id="page-header" class="page-header-stick">
        <!-- top bar -->
        <div class="top-bar bg-dark text-gray">
            <div class="container">
                <div class="row top-bar-holder">
                    <div class="col-xs-9 col">
                        <!-- bar links -->
                        <ul class="font-lato list-unstyled bar-links">
                            <li>
                                <a href="index.jsp">
                                    <strong class="dt element-block text-capitalize hd-phone">Call :</strong>
                                    <strong class="dd element-block hd-phone">+375(29) 665 02 10</strong>
                                    <i class="fas fa-phone-square hd-up-phone hidden-sm hidden-md hidden-lg"><span
                                            class="sr-only">phone</span></i>
                                </a>
                            </li>
                            <li>
                                <a href="mailto:&#069;&#120;&#097;&#109;&#112;&#108;&#101;&#064;&#100;&#111;&#109;&#097;&#105;&#110;&#046;&#099;&#111;&#109;">
                                    <strong class="dt element-block text-capitalize hd-phone">Email :Yudenkovvs@mail.ru</strong>

                                    <i class="fas fa-envelope-square hd-up-phone hidden-sm hidden-md hidden-lg"><span
                                            class="sr-only">email</span></i>
                                </a>
                            </li>
                        </ul>
                    </div>
                    <div class="col-xs-3 col justify-end">
                        <!-- user links -->
                        <ul class="list-unstyled user-links fw-bold font-lato">
                            <li><a href="login-regestration.jsp" class="lightbox">Login</a> <span class="sep">|</span> <a
                                    href="login-regestration.jsp" class="lightbox">Register</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>


        <!-- navbar collapse -->

        <!-- navbar form -->
        <form action="#" class="navbar-form navbar-search-form navbar-right">
            <a class="fas fa-search search-opener" role="button" data-toggle="collapse"
               href="#searchCollapse" aria-expanded="false" aria-controls="searchCollapse"><span
                    class="sr-only">search opener</span></a>
            <!-- search collapse -->
            <div class="collapse search-collapse" id="searchCollapse">
                <div class="form-group">
                    <input type="text" class="form-control" placeholder="Search &hellip;">
                    <button type="button" class="fas fa-search btn"><span
                            class="sr-only">search</span></button>
                </div>
            </div>
        </form>





    </header>




    <section class="container user-log-block">
        <form action="index.jsp" method="get">
            <button type="submit" class="btn btn-warning" >Вернуться на главную страницу</button>
        </form>



        <div class="row">
            <div class="col-xs-2 col-md-2">
                <p> <a href="theory.jsp">Общие сведения о периферийных устройствах и их связи с микроЭВМ </a>
                <p><a href="theoryTwo.jsp">Локальная вычислительная сеть</a>
                <p><a  href="theoryThree.jsp">Физическая среда передачи данных</a>
                <p><a  href="theoryFour.jsp">Видеосистема</a>
                <p><a  href="theoryFive.jsp">Внешние запоминающие устройства</a>

            </div>
            <div class="col-xs-10 col-md-10">
                <p  class="bold1">Организация и функционирование ЭВМ и ПУ</p>
                <p class="bold1">Общие сведения о периферийных устройствах и их связи с микроЭВМ</p>
                <form action="/result?action=1" method="post">
                    К внешней памяти относятся устройства, позволяющие автономно сохранять информацию для последующего ее использования независимо от состояния (включен или выключен) компьютера. Эти устройства могут использовать различные физические принципы хранения информации — магнитный, оптический, электронный в любых их сочетаниях. По методу доступа к информации устройства внешней памяти разделяются на устройства с прямым (или непосредственным) и последовательным доступом. Характерной особенностью внешней памяти является то, что ее устройства оперируют блоками информации, но никак не байтами или словами, как это позволяет оперативная память. Эти блоки обычно имеют фиксированный размер, кратный степени числа 2, но в некоторых случаях у устройств с последовательным доступом размер блока может быть и переменным. Прямой доступ (Direct Access) подразумевает возможность обращения к блокам по их адресам в произвольном порядке. Традиционными устройствами с прямым доступом являются дисковые накопители (про магнитные барабаны мало кто уже помнит), и часто в понятие «диск» или «дисковое устройство» (Disk Device) вкладывают значение «устройство внешней памяти прямого доступа». Так, например, виртуальный диск в ОЗУ и электронный диск на флэш-памяти отнюдь не имеют круглых, а тем более вращающихся деталей. В памяти с последовательным доступом (Sequential Access) каждый блок информации тоже может иметь свой адрес, но для обращения к нему устройство хранения должно сначала найти некоторый маркер начала ленты (тома), после чего последовательным холостым чтением блока за блоком дойти до требуемого места и только тогда производить сами операции обмена данными. Конечно, для обращения к следующему блоку каждый раз возвращаться на начало необязательно — текущую позицию, пока устройство хранения и компьютер включены, может хранить управляющая программа. Однако необходимость последовательного сканирования блоков (вперед или назад) — неотъемлемое свойство этих устройств. Традиционными устройствами внешней памяти с последовательным доступом (Таре Device) являются накопители на магнитной ленте — (фотопленка и перфолента остались в «древней истории», хотя перфолента еще используется как носитель информации для станков с ЧПУ).
                    Главная характеристика устройств — емкость хранения (Capacity), измеряемая в килобайтах, мегабайтах, гигабайтах и терабайтах (Кбайт, Мбайт, Гбайт, Тбайт или KB, MB, GB, ТВ, или еще короче — К, М, G, Т). Различия значений емкости одного и того же устройства, полученных из разных источников, обычно обусловлены неточностью в применении приставок кило-, мега-, гига-, тера-, которые, кроме стандартного десятичного значения 103, 106, 109 и 1012, могут иметь двоичные значения 210, 220, 230 и 240 соответственно. 1 Кбайт = 1024 байт, 1 Мбайт = 1024 Кбайт, 1 Гбайт - 1024 Мбайт, 1 Тбайт = 1024 Гбайт. В рекламных целях емкость накопителя, измеренную в байтах, иногда делят на 1000 или 106 и полученные результаты преподносят как емкость в килобайтах или мегабайтах, что некорректно.
                    Устройства внешней памяти могут иметь сменные или фиксированные носители информации. Применение сменных носителей (Removable Media) позволяет хранить неограниченный объем информации, а если носитель и формат записи стандартизованы, то они позволяют и обмениваться информацией между компьютерами. Существуют устройства с автоматической сменой носителя — ленточные карусели, дисковые устройства JukeBox. Эти достаточно дорогие устройства применяют в мощных файл-серверах. Для настольных машин имеются накопители CD-ROM с несколькими дисками (CD Changer), сменяемыми автоматически.
                    Важнейшими общими параметрами устройств являются время доступа, скорость передачи данных и удельная стоимость хранения информации.
                    Время доступа (Access Time) определяется как усредненный интервал от выдачи запроса на передачу блока данных до фактического начала передачи. Для устройств с подвижными носителями основной расход времени происходит в процессе позиционирования головок (Seek Time — время поиска) и ожидания подхода к ним требуемого участка носителей (Latency — скрытый период). Для дисковых и ленточных устройств принципы позиционирования различны, и различные составляющие процесса поиска будут подробнее рассмотрены в описании соответствующих устройств. Дисковые устройства имеют время доступа от единиц до сотен миллисекунд. Для электронных устройств внешней памяти время доступа определяется быстродействием используемых микросхем памяти и при чтении составляет доли микросекунд, причем запись может ожидаться значительно дольше, что объясняется природой энергонезависимой электронной памяти.
                    Скорость передачи данных (Transfer Speed) определяется как производительность обмена данными, измеряемая после выполнения поиска данных. Однако в способе измерения этого параметра возможны разночтения, поскольку современные устройства имеют в своем составе буферную память существенных размеров. Скорости обмена буферной памяти с собственно носителем (внутренняя скорость) и с внешним интерфейсом могут существенно различаться. Если скорость работы внешнего интерфейса ограничивается быстродействием электронных схем и достижимой частотой передаваемых сигналов, то внутренняя скорость более жестко ограничивается возможностями электромеханических устройств (скоростью движения носителя и плотностью записи). При измерениях скорости передачи на небольших объемах пересылок проявится ограничение внешнего интерфейса буферной памяти, при средних объемах — ограничение внутренней скорости, а при больших объемах проявится еще и время поиска последующих блоков информации. Бывает, что в качестве скорости передачи данных указывают лишь максимальную скорость интерфейса, а о внутренней скорости можно судить по частоте вращения дисковых носителей и числу секторов на треке, но об этих понятиях будет сказано чуть позже.
                    Определение удельной стоимости хранения информации для накопителей с фиксированными носителями пояснения не требует. В случае сменных носителей этот показатель интересен для собственно носителей, но не следует забывать и о цене самих накопителей, которую тоже можно приводить к их емкости.

                    <p>5.2.Дисковые накопители

                    Несмотря на большое разнообразие физических носителей и принципов записи и считывания информации, дисковые накопители имеют своей основой механизм, схематически представленный на рис. 6.1.


                    Слой носителя информации — магнитный, оптический или какой-либо иной — нанесен на рабочие поверхности дисков. Диски вращаются с помощью двигателя шпинделя (Spindel Motor), обеспечивающего требуемую частоту вращения в рабочем режиме. На диске имеется индексный маркер, который, проходя мимо специального датчика, отмечает начало каждого оборота диска. Информация на диске располагается на концентрических треках (дорожках), нумерация которых начинается с внешнего трека (Track 00). Каждый трек разбит на секторы (Sector) фиксированного размера. Сектор и является минимальным блоком информации, который может быть записан на диск или считан с него. Нумерация секторов начинается с единицы и привязывается к индексному маркеру. Каждый сектор имеет служебную область, содержащую адресную информацию, контрольные коды и некоторую другую информацию, и область данных, размер которой традиционно составляет 512 байт. Если накопитель имеет несколько рабочих поверхностей (на шпинделе может быть размещен пакет дисков, а у каждого диска могут использоваться обе поверхности), то совокупность всех треков с одинаковыми номерами составляет цилиндр (Cylinder). Для каждой рабочей поверхности в накопителе имеется своя головка (Head), обеспечивающая запись (если это позволяет накопитель) и считывание информации Головки нумеруются начиная с нуля. Для того чтобы произвести элементарную операцию обмена — запись или чтение сектора, — шпиндель должен вращаться с заданной скоростью, блок головок должен быть подведен к требуемому цилиндру, и только когда требуемый сектор подойдет к выбранной головке, начнется физическая операция обмена данными между головкой и блоком электроники накопителя. Для записи информации на носитель и ее считывания используются различные методы частотной или фазовой модуляции, позволяющие кодировать и декодировать двоичную информацию в соответствии с природой носителя информации. Контроллер накопителя выполняет сборку и разборку блоков информации (секторов или целых треков), включая формирование и проверку контрольных кодов, осуществляет модуляцию и демодуляцию сигналов головок и управляет всеми механизмами накопителя.
                    <p>5.3. Компоненты накопителей на магнитных дисках
                    Рассказав в общих чертах о работе дисковых накопителей, остановимся подробнее на отдельных деталях накопителей на магнитных дисках.
                    Пластины (Platter) дисков могут быть гибкими или жесткими. В любом случае их материал не должен сильно изменять свой размер со временем и под действием перепадов температур. Для пластин гибких дисков используют май-лар или лавсан, для жестких — обычно алюминий. На поверхность пластины наносят рабочий магнитный слой, который чаще всего основан на окиси железа. Хранимую информацию представляет состояние намагниченности отдельных участков рабочей поверхности. От качества материала рабочего слоя (коэрцитивной силы, размера зерна) зависит допустимая плотность записи информации. Более высокой плотности хранения информации позволяет добиться применение металлического носителя — Plated Media. Механическая прочность и устойчивость рабочего слоя определяет долговечность носителя.
                    Традиционно для записи и считывания информации используются магнитные головки, представляющие собой миниатюрные катушки индуктивности, намотанные на магнитном сердечнике с зазором. При записи головка намагничивает участок магнитного слоя, проходящий под рабочим зазором, в направлении, определяемом направлением протекающего тока. При проходе намагниченных участков поверхности около индуктивной головки считывания в момент смены направления намагниченности в ней наводятся импульсы э.д.с., полярность которых определяется знаком смены направления. Таким образом, сигнал считывания в индуктивной головке по форме представляет собой производную от записанного сигнала. Это свойство обязательно учитывается при выборе способа модуляции, о которой речь пойдет ниже. Требования к оптимальной конструкции головок для процессов записи и считывания различаются, так что универсальная головка представляет собой некоторый компромисс. Первые индуктивные головки содержали проволочные обмотки, их сменили головки, выполненные по тонкопленочной технологии TF (Think Film — тонкая пленка). В современных накопителях для считывания все чаще применяют магниторе-зистивные головки, основанные на эффекте анизотропии сопротивления полупроводников в магнитном поле (AMR — anisotropic magnetoresistance). В них через магниторезистивный датчик пропускают измерительный ток, и величина падения напряжения на нем пропорциональна намагниченности находящегося под головкой участка магнитной поверхности. В отличие от индуктивной маг-ниторезистивная головка вырабатывает сигнал не по производной записанного сигнала, а повторяет его форму. Магниторезистивная головка считывания хорошо уживается с индуктивной головкой записи, что позволяет достигать высокой плотности записи информации на магнитный носитель. Однако по технологии изготовления она сложнее тонкопленочной индуктивной, поскольку в ней сочетаются разнородные компоненты.
                    Скорость вращения дисков у разных накопителей различна. У накопителей на гибких дисках она составляет 300 или 360 об/мин, у распространенных накопителях на жестких дисках — 3600 об/мин. Чем выше скорость вращения, тем больше скорость обмена информацией с диском. У наиболее быстрых дисков скорость достигает 5400 и даже 7200 об/мин. Однако высокие скорости вращения порождают проблемы, связанные с балансировкой, гироскопическим эффектом и аэродинамикой головок. Из-за гироскопического эффекта не рекомендуется перемещение (точнее, смена ориентации оси шпинделя) включенных накопителей с вращающимся шпинделем. Накопители для портативных компьютеров разрабатываются с учетом этих эффектов.
                    Для магнитных головок весьма критично расстояние от головки до поверхности магнитного слоя носителя. В накопителях на гибких дисках в нерабочем положении головка поднята над поверхностью диска на несколько миллиметров, а в рабочем прижимается к поверхности диска специальным электромагнитным приводом. Однако непосредственный контакт головки с поверхностью допустим лишь при малых скоростях движения носителя. В накопителях с высокой скоростью вращения головки поддерживаются на микроскопическом расстоянии от рабочей поверхности аэродинамической подъемной силой. «Падение» головки на рабочую поверхность, которое произойдет, если диск остановится, может повредить как головку, так и поверхность диска. Чтобы этого не происходило, в нерабочем положении головки паркуются (Park) — отводятся в нерабочую зону, где допустимо их «приземление». Старые винчестеры требовали выполнения операции парковки, инициируемой программным обеспечением. Для ее выполнения в параметрах жестких дисков, хранимых в CMOS, присутствовал номер цилиндра для парковки (Landing Zone или LZone). Парковка выполнялась запуском утилиты PARK или других утилит. Однако, если после выполнения парковки появлялось обращение к жесткому диску, головки его, естественно, выходили из «зоны приземления», и парковка теряла смысл. В современных накопителях парковка осуществляется автоматически при снижении напряжения питания или же по снижении скорости вращения шпинделя ниже допустимого значения. Для таких накопителей указанное в BIOS Setup значение параметра LZone игнорируется. Контроллеры современных дисков к тому же не выпустят головок из зоны парковки, пока шпиндель не наберет заданных оборотов. Высота «полета» головки должна выдерживаться довольно строго, иначе магнитные поля головок будут «промахиваться» мимо рабочего слоя. Высота определяется тем положением, когда подъемная сила, определяемая скоростью вращения, формой «крыла» головки и плотностью воздуха, уравновесит давление прижимающей головку пружины. Плотность воздуха меняется в зависимости от атмосферного давления, и по этой причине в параметрах накопителей указывают максимальную высоту над уровнем моря, на которой может работать накопитель (или минимальное атмосферное давление). Конечно же, должна быть и верхняя граница допустимого давления (для подводных аппаратов), но этот параметр для устройств широкого применения не указывают, поскольку с такими условиями сталкиваются редко.
                    В качестве привода для позиционирования головок на нужный цилиндр в накопителях на гибких дисках и старых винчестерах применяют шаговые двигатели. Эти двигатели под действием серии импульсов, подаваемых на их обмотки, способны поворачивать свой вал на определенный угол. Этот угол может быть только кратен минимальному шагу, определяемому конструкцией двигателя. Вращательное движение вала шагового двигателя преобразуется в поступательное с помощью червячного механизма или металлической ленты, намотанной на вал. Таким образом, поворот вала двигателя на один шаг приводит к перемещению блока головок на один цилиндр. Червячная передача должна быть высококачественной — люфты в ней будут приводить к погрешности позиционирования. Ленточная передача в принципе свободна от люфтов, она обеспечивает более высокую точность и быстродействие позиционирования. Однако под действием изменения температуры и со временем из-за износа положение треков на носителе, задаваемое только шаговым двигателем, будет меняться, и ранее записанная информация может перестать считываться. Требования к точности позиционирования растут с повышением плотности хранения информации (количества цилиндров на диске), а быстродействие позиционирования определяет время доступа, которое, естественно, стремятся уменьшить. С точки зрения теории автоматического управления привод с шаговым двигателем является разомкнутой системой (то есть системами без обратной связи). Такая система не позволяет корректировать ошибки позиционирования, вызванные, например, температурным изменением размеров дисков. Конечно, при всех операциях обмена проверяется адресный маркер цилиндра и в случае его несовпадения делается повторная попытка позиционирования — возврат к нулевому цилиндру и подача требуемого количества шаговых импульсов. Выход на нулевую дорожку определяется по датчику нулевого цилиндра, в качестве которого обычно применяется оптоэлектронная пара с флажком, связанным с блоком головок. Точное положение датчика нулевого цилиндра для несменных дисков не так уж существенно — главное, чтобы оно не менялось после процедуры низкоуровневого форматирования, о которой речь пойдет ниже. Для накопителей со сменными носителями положение нулевого цилиндра существенно — для обеспечения совместимости накопителей у всех устройств его положение должно совпадать. Однако датчик задает положение нулевого цилиндра лишь грубо — он определяет только номер шага привода, на котором головки находятся напротив нулевого цилиндра. Более точно положение можно отрегулировать вращением корпуса двигателя в пределах нескольких градусов (не больше, чем угловой шаг двигателя). В накопителях с шаговым приводом довольно сложно осуществить автоматическую парковку головок, поскольку для этого необходимо сформировать серию импульсов управления шаговым двигателем. В случае внезапного отключения питания для автопарковки должна быть запасена достаточная энергия. Иногда в качестве хранилища энергии используется сам пакет дисков: при отключении питания шпиндельный двигатель начинает работать генератором, обеспечивая питание схемы управления и шагового двигателя на время автопарковки
                    В современных накопителях применяют привод головок с подвижной катушкой (Voice Coil Actuator), работающий по принципу звуковой катушки динамика. В таком приводе блок головок связан с катушкой индуктивности, помещенной в магнитное поле постоянного магнита. При протекании тока через катушку на нее начинает действовать сила, пропорциональная силе тока, которая вызовет перемещение катушки, а следовательно, и блока головок. Привод может быть линейным или поворотным. В накопителе с линейным приводом катушка с блоком головок перемещается по радиусу дисков. Такой привод применялся в накопителях больших машин. В накопителе с поворотным приводом блок головок с катушкой размещены на поворотной рамке (рис. 6.2), и траектория головок отличается от радиальной. При этом азимут головки относительно трека меняется при перемещении головки, и эта азимутальная погрешность нежелательна для работы головок записи и считывания. Тем не менее с этой неприятностью, отсутствующей в случае линейного привода, мирятся из-за относительной простоты исполнения, меньших габаритов, а следовательно, и меньшей инерционности поворотного привода. В большинстве современных накопителей на жестких дисках применяется поворотный привод. Управляя направлением и силой тока, можно быстро перевести блок головок в любое положение — произвольное, а не по фиксированным шагам. Но в такой системе позиционирования необходима обратная связь — информация о текущем положении головок, по которой контроллер может управлять приводом. Привод, обеспечивающий точное позиционирование по сигналу обратной связи, называется сервоприводом. Управление сервоприводом может быть оптимизировано по времени установления головок на требуемую позицию, когда отклонение от заданного положения велико, можно подавать больший ток, вызывающий большое ускорение блока. По мере приближения ток уменьшается, а для компенсации инерции в конце позиционирования ток может и поменять направление (активное торможение). Такая система привода позволяет сократить время доступа до единиц миллисекунд против сотен миллисекунд, характерных для шагового привода. Остается только решить вопрос об источнике сигнала обратной связи для сервопривода, который, с точки зрения теории автоматического управления, является замкнутой системой.


                    В первых накопителях с линейным приводом использовалась специальная зубчатая рейка и магнитный датчик, по сигналу которого отсчитывался номер трека. Однако по отношению к диску такая система привода все равно оставалась разомкнутой — привод позиционировал головки по своим соображениям о координатах. Замкнуть систему управления позволило размещение сервометок — вспомогательной информации для «системы наведения» — прямо на диске. В таком случае изменения размеров диска и привода под действием температуры и других факторов перестает существенно влиять на точность позиционирования, поскольку сервометки располагаются на тех же искомых треках. Сервометки записываются при сборке накопителя, когда для позиционирования используется внешний «прицел» специального технологического оборудования. В процессе эксплуатации сервометки только считываются, а серводорожки построены таким образом, что по считываемым сигналам обеспечивается быстрая и точная идентификация положения головки для поиска и слежение за положением головок относительно найденного трека. По месту размещения серво-меток различают накопители с выделенной сервоповерхностью (Dedicated Servo) и со встроенными сервометками (Embeded Servo). В первом случае в пакете дисков выделяется одна поверхность, используемая исключительно для хранения сервометок, и соответствующая ей головка является сервоголовкой. Ошибка позиционирования в такой системе может возникать вследствие изменения взаимного положения (перекоса) головок в блоке Сервоголовка для следящей системы дает информацию практически непрерывно, что улучшает качество процесса поиска и слежения Верным признаком выделенной сервоповерхности является нечетное количество головок (рабочих), указанное для данного накопителя.
                    В накопителях со встроенными сервометками информация для сервопривода записывается на рабочих поверхностях между секторами с данными. Она может размещаться в начале каждого трека — при этом на диске появляется клиновидная область сервометок. Недостатком такого размещения является то, что сервоинформация (сигнал обратной связи) доступна дискретно с периодичностью в один оборот диска, который для скорости 3600 об/мин занимает 16,6 мс. До точного позиционирования приходится выжидать нескольких оборотов диска. Более быстродействующий вариант — размещение сервометок перед каждым сектором, что позволяет выйти на заданный трек даже за доли оборота шпинделя. Преимущество встроенных сервометок в том, что он позволяет компенсировать любые изменения геометрии, поскольку система наводит головки именно по тому треку, к которому выполняется доступ. Существуют накопители и с гибридной сервосистемой, где кроме выделенной сервоповерхности используются и сервометки, размещенные на рабочих поверхностях.
                    Для накопителей с подвижной катушкой проблема автопарковки решается легко: блок головок при обесточивании сервопривода может быть легко установлен в зону парковки с помощью пружины. В старых накопителях с линейным приводом для возврата головок в исходное состояние использовали энергию, запасенную в конденсаторе.
                    Вся электромеханическая часть накопителя — пакет дисков со шпиндельным двигателем и блок головок с приводом, сокращенно называемая HDA (Head Disk Assembly), заключается в защитный кожух. Совершенно очевидно, что в корпусах накопителей воздух должен быть чистым — мелкая частичка, попавшая под головку, под которой пролетает носитель со скоростью в несколько десятков километров в час, может поцарапать и головку и диск. Обычно кожух не герметичен — в нем имеется отверстие, закрытое фильтром, обеспечивающее выравнивание давления внутри сборки с атмосферным. Кроме этого фильтра, называемого барометрическим, имеется еще и внутренний рециркуляционный фильтр. Этот фильтр устанавливается на пути потока воздуха, увлекаемого вращающимся пакетом дисков. Он улавливает частички, которые могут выбиваться из поверхности дисков при «взлете» и «посадке» головок. Кроме пыли, в корпусе накопителя могут образоваться капельки конденсата влаги. Если накопитель находился на морозе, то в теплом помещении перед включением он должен быть выдержан несколько часов, пока конденсат не испарится с отогревшихся частей. Если запустить не отогревшийся накопитель, последствия для рабочих поверхностей могут быть фатальными, особенно если головки примерзнут к пластинам. Существуют, конечно, и специальные накопители для работы в особых климатических условиях. Они могут иметь герметический корпус, который выдерживает разность внутреннего и наружного давления. В PC, как правило, применяют накопители обычного исполнения.
                    Кроме механики, дисковый накопитель должен иметь и блок электроники, управляющий приводами шпинделя и головок, а также обслуживающий сигналы рабочих головок записи-считывания. Контроллером накопителя называют электронное устройство, на одной (интерфейсной) стороне которого обмен идет байтами команд, состояния и, конечно же, записываемой и считываемой информации, а другая его сторона связывается с блоком HDA. В современных накопителях на жестких дисках с интерфейсом АТА и SCSI контроллер расположен на плате электроники, смонтированной вместе с блоком HDA. В накопителях на гибких дисках на плате электроники накопителя смонтированы только схемы управления двигателями, усилители-формирователи сигналов записи и считывания, датчика индекса и некоторых других. Контроллер гибких дисков вынесен на специальную плату адаптера или размещается на системной плате.
                   <p> 5.4.Хранение информации на магнитных носителях
                    Как понятно из вышеприведенного описания общих принципов работы накопителей, записать и потом достоверно считать информацию с диска не так-то просто. Для записи данных необходимо сформировать последовательный код, который, кроме собственно записываемых данных, должен включать и синхронизирующие сигналы. Кроме того, напомним, что индуктивные считывающие головки воспринимают только факты изменения состояния намагниченности участков трека. Также учтем, что физическое исполнение — магнитные свойства носителя, конструкция головок, скорость движения, высота полета головок и т. п. — задает предельно достижимую плотность изменения состояния намагниченности (Flux Density), которую хотелось бы использовать максимально эффективно. Эта плотность измеряется в количестве зон с различным состоянием намагниченности на дюйм длины трека — FCI (Flux Changes per Inch — изменений потока на дюйм) и в современных накопителях достигает десятков тысяч. Для записи на диск используются различные схемы кодирования (Data Encoding Scheme), отличающиеся по сложности реализации и эффективности работы. В первых моделях накопителей использовалась частотная модуляция FM (Frequency Modulation). Здесь для каждого бита данных на треке отводится ячейка с окнами для представления бита и синхросигнала, что весьма неэффективно . Более эффективна модифицированная частотная модуляция MFM (Modified Frequency Modulation), в которой синхросигнал вводится только при кодировании подряд следующих нулевых бит, что позволяет удвоить плотность записи при той же плотности изменения потока. И FM и MFM являются схемами с побитным кодированием. Более эффективны схемы группового кодирования, при которых цепочка байт данных (сектор) предварительно разбивается на группы по несколько бит, которые кодируются по определенным правилам.
                    Как уже говорилось, информация на дисках записывается и считывается посекторно, и каждый сектор имеет определенную структуру (формат). В начале каждого сектора имеется заголовок, за которым следует поле данных и поле контрольного кода. В заголовке имеется поле идентификатора, включающее номер цилиндра, головки и собственно сектора. В этом же идентификаторе может содержаться и пометка о дефектности сектора, служащая указанием на невозможность его использования для хранения данных. Достоверность поля идентификатора проверяется с помощью контрольного кода заголовка. Заголовки секторов записываются только во время операции низкоуровневого форматирования, причем для всего трека сразу. При обращении к сектору по чтению или записи заголовок только считывается. Поле данных сектора отделено от заголовка небольшой зоной, необходимой для того, чтобы при операции записи головка (точнее, обслуживающая ее схема) могла успеть переключиться с режима чтения (заголовка) в режим записи (данных). Завершает сектор контрольный код поля данных — CRC (Cyclic Redundancy Check — циклический избыточный контроль) или ЕСС (Error Checking and Correcting — обнаружение и коррекция ошибок). CRC-код позволяет только обнаруживать ошибки, а ЕСС-код позволяет и исправлять ошибки небольшой кратности. В межсекторных промежутках, как уже говорилось выше, может размещаться и сервоинформация.
                    Таким образом, структура трека — последовательность секторов — задается при его форматировании, а начало трека определяется контроллером по сигналу от индексного датчика. Нумерация секторов, которая задается контроллеру при форматировании, может быть достаточно произвольной — важно лишь, чтобы все секторы трека имели уникальные номера в пределах допустимого диапазона. При обращении к сектору он ищется по идентификатору, а если за оборот диска (или за несколько оборотов) сектор с указанным номером не будет найден, контроллер зафиксирует ошибку Sector Not Found — сектор не найден. Забота о поиске сектора по его заголовку, помещение в его поле данных записываемой информации, снабженной контрольным кодом, а также считывание этой информации и ее проверка лежит на контроллере накопителя. И, конечно же, контроллер управляет поиском затребованного цилиндра и коммутацией головок, выбирая нужный трек.
                    Теперь рассмотрим пути оптимизации дисков, направленной на повышение производительности — в конечном счете средней скорости обмена данными. Время, затрачиваемое на обмен данными одного сектора, складывается из времени поиска цилиндра (Seek Time), времени ожидания подхода сектора к головке (Latency Time), времени обмена данными сектора между накопителем и контроллером и между контроллером и памятью компьютера, являющейся источником и пунктом назначения хранимых данных. Конечно, основными факторами, определяющими эти затраты времени, являются механические: достижимая скорость позиционирования и скорость вращения диска. Последний параметр определяет и ожидание сектора (в среднем это половина периода оборота диска), и время собственно передачи данных сектора (оно примерно равно времени оборота, деленному на количество секторов на треке). Однако одиночная передача сектора встречается редко, поскольку его размер невелик. Интерес представляет оптимизация передачи блока данных, расположенных в соседних секторах. Вполне естественно, что если блок данных не умещается в одном секторе, его продолжение будет храниться на том же треке в секторе со следующим номером, поскольку для доступа к нему нужно только дождаться его подхода к головке. Когда емкость трека будет исчерпана, логично перейти на следующую поверхность того же цилиндра, для чего достаточно только переключить головки, что выполняется электронным путем довольно быстро. Использовав все секторы цилиндра, переходят к следующему цилиндру, для чего уже необходимо переместить головки — то есть затратить заметное время на операцию поиска. Дефрагментирующие программы как раз и занимаются тем, что размещают все блоки файлов в последовательных кластерах, а следовательно, и секторах, упорядоченных по данному способу счета. Они справедливо рассчитывают на то, что для дискового накопителя оптимален именно такой порядок запроса секторов.
                    Теперь слово за накопителем.
                    Оказывается, что при неизменных механических параметрах накопителя и том же числе секторов на треке можно повысить скорость обмена длинными блоками данных за счет особого расположения секторов. Рассмотрим случай, когда необходимо считать длинный блок данных, расположенный в вышеописанном естественном порядке на нескольких цилиндрах диска (процесс записи будет выполняться похожим образом).
                    Первым делом рассмотрим пути оптимизации трека. В простейшем случае секторы на треке нумеруются последовательно. После того как требуемый сектор прошел под головкой и его данные из накопителя попали в контроллер, который проверил их достоверность по контрольному коду, данные из контроллера передаются в память компьютера (передача может быть и сквозной, без буферирования в контроллере). После анализа состояния выполнения операции контроллер получает указание на считывание следующего сектора, но он к этому времени уже может пролететь под головкой. Тогда контроллеру придется ждать почти полный оборот диска, пока сектор не подойдет снова. Выходом в такой ситуации является применение чередования секторов (Interleaving), при котором нумерация секторов выглядит иначе (рис. 6.3). Здесь изображена нумерация секторов в случае применения фактора чередования 2.1 (Interleave factor). Секторы с соседними номерами располагаются не рядом, а через один (в нашем случае) или более секторов За время реакции системы на прием одного сектора под головкой проходят эти «вставки», а к моменту, когда контроллер будет готов принять следующий сектор, он как раз и подойдет к головке. Конечно, если контроллер способен принять цепочку секторов быстро, чередование секторов принесет только дополнительную задержку. На старых компьютерах XT и АТ-286 с медленными контроллерами правильный выбор фактора чередования позволял повысить скорость обмена данными в несколько раз. В современных накопителях со встроенными быстродействующими контроллерами, способными благодаря наличию буферной памяти значительного объема за одну операцию записать или считать все секторы трека, чередование секторов не применяют (это можно рассматривать и как применение фактора чередования 1:1).


                    После того как будет считан последний сектор одного трека, потребуется переход на следующий трек. При переходе в пределах одного цилиндра потребуется только переключение головок, на что уйдет порядка десятка микросекунд, но дополнительную задержку может вносить и контроллер. За это время первый сектор следующего трека может успеть уйти, и опять придется пропускать почти целый оборот. Чтобы этого не случилось, вводят послойное смещение секторов, при котором начало следующего трека цилиндра чуть отстает от предыдущего. Однако более существенную задержку — единицы миллисекунд — вносит перемещение головок на соседний цилиндр. Для учета этой задержки вводят радиальное смещение секторов (Radial Skew) соседних цилиндров.
                    Если чередование секторов задается чисто программно указанием последовательности номеров секторов в команде форматирования трека, то для задания послойного и радиального смещения общепринятый программный интерфейс отсутствует. Смещение применяют только для накопителей со встроенными контроллерами, каковыми и являются накопители с интерфейсами АТА и SCSI.
                    <p>5.5. Низкоуровневое форматирование
                    Низкоуровневое форматирование дисков — LLF (Low Level Formatting) — это процедура создания структуры секторов диска, которая для каждого накопителя (или сменного носителя) должна быть выполнена перед его использованием в качестве устройства хранения данных. Процедура сводится к тому, что каждый трек диска размечается и верифицируется. При разметке трека на нем формируются заголовки секторов, а в поля данных записывается какой-либо код-заполнитель. Отформатировать трек можно только целиком — за одну операцию должны быть записаны все его секторы. В процессе верификации делается попытка считывания каждого сектора, и если при считывании обнаруживается устойчивая ошибка, сектор в заголовке помечается как дефектный. Для гибких дисков низкоуровневое форматирование является составной частью процесса форматирования, выполняемого утилитой FORMAT или ей подобными. Во время форматирования жестких дисков формируется структура пакета дисков со всеми чередованиями, смещениями и прочими тонкостями.
                    Форматирование жестких дисков АТА и SCSI, у которых контроллер совмещен с накопителем, выполняется только изготовителем с помощью специальных программных средств, учитывающих эти тонкости.
                    <p>5.6. Контроллеры дисковых накопителей
                    Контроллеры современных накопителей представляют собой сложные устройства, построенные на основе микропроцессоров. В состав контроллера входят узлы, непосредственно связанные с обработкой и формированием сигналов блока HDA, — коммутатор головок, схемы кодирования-декодирования данных с усилителями сигналов, схемы управления позиционированием, шпинделем и, если надо, сменой носителя. Кроме того, контроллер может содержать буферную память (кэш), объем которой может достигать сотен килобайт, хотя и это не предел. Рассмотрим, на что расходуется «интеллект» контроллера.
                    Хранение данных на магнитном носителе всегда сопровождается появлением ошибок, причин у которых может быть множество: дефект поверхности носителя, случайное перемагничивание участка носителя, попадание посторонней частицы под головку, неточность позиционирования головки над треком, колебание головки по высоте, вызванное внешней вибрацией (ударом) корпуса накопителя, уходом различных параметров (из-за старения, изменения температуры, давления и т. п.). Независимо от причин, ошибки должны быть выявлены и по возможности исправлены. Если сектор считывается с ошибкой, контроллер автоматически выполнит повторное считывание, и при случайности ошибки велик шанс правильного считывания сектора. Однако, если ошибка вызвана, например, неточностью позиционирования головки на середину трека, связанной с уходом параметров, повторное считывание может и не дать положительного эффекта. Накопитель с шаговым приводом головки в этой ситуации может только повторить позиционирование — вернуться на нулевой трек и снова «дошагать» до нужного — иногда это помогает. У привода с подвижной катушкой больше возможностей для поиска положения головки, оптимального для считывания данных. Для этого следящая система может покачать головку относительно центрального положения, заданного сервометками, и найти точку, где данные читаются верно.
                    Если контроллеру никак не удается достоверно прочитать записанные в сектор данные, такой сектор должен быть исключен из дальнейшего использования. Если этого не сделать, бесчисленные повторные попытки обращения к этому сектору будут отнимать массу времени, а результата все равно не будет. На уровне накопителя отметка о дефектности блока делается в заголовке сектора, запись в который, как известно, производится только во время низкоуровневого форматирования. Однако современные встроенные контроллеры дисков сами обрабатывают обнаружение дефектных секторов и вместо них подставляют резервные, так что для пользователя дефектные секторы у дисков АТА и SCSI не видны. Контроллер помечает дефектный сектор специальной пометкой в заголовке, а вместо него использует сектор из резервной области, которая имеется в конце каждого трека. Однако простая подстановка номера отказавшего сектора в заголовок сектора из резервной области приведет к нарушению последовательности секторов и, следовательно, к падению производительности при обращении к длинному блоку данных. Более «хитрые» контроллеры производят сдвиг данных во всех секторах, следующих за дефектным, на один сектор назад (Defective Sector Slipping), после чего обращение к последовательной цепочке секторов снова станет «гладким» (без скачков вперед-назад) и быстрым. Конечно, со временем настанет момент, когда все резервные блоки будут использованы, и тогда появление видимого дефектного блока будет сигналом к замене накопителя.
                    Надежность считывания в большой степени зависит от точности позиционирования головок относительно продольной оси трека. Позиционирование, обеспечиваемое сервоприводом (особенно с выделенной сервоповерхностью), может быть и не оптимальным для каждой головки и требовать коррекции. Главным образом, эта коррекция необходима из-за изменения рабочей температуры. «Умный» контроллер хранит карту отклонений для цилиндров и головок, которую он создает и периодически корректирует в процессе работы. Процесс автоматической термокалибровки накопителя (Thermal Calibration, или T-Cal) запускается встроенным контроллером автоматически, и для системы, в которую он установлен, момент запуска этого процесса случаен. Процесс автоматической термокалибровки заметен пользователю: винчестер, к которому нет обращений, вдруг «начинает жить своей жизнью», выполняя серию позиционирований (слышно по характерным звукам). Во время рекалибровки доступ к данным накопителя приостанавливается, что не всегда допустимо. Накопители, предназначенные для мультимедийных целей, а также используемые как мастер-диски для записи данных на лазерный диск, должны обеспечивать довольно длительный непрерывный поток передачи данных. Их контроллеры не должны позволять себе «вольности» термокалибровкой приостанавливать сеансы передачи данных.
                    Кроме термокалибровки, есть еще один процесс, асинхронно запускаемый контроллером диска, — так называемое свипирование (Sweeping): если к диску долгое время отсутствуют обращения, он перемещает головки в новое, случайным образом определенное положение. Этот процесс напоминает «хранитель экрана» монитора (Screen Saver) и предназначен для выравнивания степени износа поверхности диска.
                    Современные контроллеры имеют встроенную кэш-память, от размера которой и алгоритма использования сильно зависит производительность обмена данными. Общепринятой технологией кэширования диска является упреждающее считывание (Read Ahead). Суть его проста: если контроллер получает запрос на чтение сектора, то он автоматически считает в буфер и секторы, следующие за запрошенным. Весьма вероятный запрос к следующему сектору будет обслужен из буфера без задержки (Latency), которая возможна из-за естественной несинхронизируемости действий операционной системы и приложений с вращением диска. Более «ловкие» контроллеры идут дальше: они считывают в буфер весь трек, как только выполнится команда позиционирования, а когда придет следующая за ней команда чтения, данные уже будут в буфере. Такие хитрости (Zero Latency — нулевая задержка) позволяет система команд интерфейса SCSI. Как и для всякой кэш-памяти, для эффективности встроенного кэша накопителя существенным фактором является алгоритм выделения памяти и замещения старых записей. Как обычно, замене подлежат наиболее старые записи. Вопрос о размере выделяемых областей для упреждающего чтения может решаться исходя из текущей статистики обращений. Контроллер с адаптивным кэшированием, заметив, что последние запросы чтения являются одиночными, перестанет выделять большие области под упреждающее чтение. Если характер запросов изменится, адаптивный контроллер примет соответствующие решения. Кроме того, отпечаток на алгоритм кэширования накладывает и многозадачный характер современных операционных систем и их дисковых запросов. Таким образом, многозадачность проникает и во встроенные контроллеры дисков.
                    Дисковые накопители являются, пожалуй, той частью компьютера, отказ которой оборачивается самыми крупными убытками (если потерянные данные не имеют дублей). Естественно, надежность их пытаются повышать всеми возможными способами, но отказы все-таки случаются. Отказы разделяются на предсказуемые и непредсказуемые. Предсказуемые отказы (Predictable Failure) появляются в результате постепенного ухода каких-либо параметров от номинальных значений, когда этот уход перейдет некоторый порог. Если наблюдать за такими параметрами накопителей, как время разгона до заданной скорости, время позиционирования, процент ошибок позиционирования, высота полета головок, производительность (зависящей и от числа вынужденных повторов для успешного выполнения операций), количество использованных резервных секторов и других параметров, то становится возможным предсказание отказов.
                    Задачи слежения за параметрами накопителя возлагаются на контроллер, а программному обеспечению компьютера остается только периодически интересоваться, все ли в порядке в накопителе, или грядет беда. Конечно, остаются и непредсказуемые отказы (Non-Predictable Failure), которые случаются внезапно. Они чаще всего вызываются разрушениями электронных схем под действием импульсных помех, механические части страдают от ударов. Снижать вероятность непредсказуемых отказов позволяет совершенствование технологий производства компонентов.
                    <p>5.7.Параметры дисковых накопителей
                    После рассмотрения устройства и работы дисковых накопителей должен быть понятным смысл их основных параметров.
                    Форматированная емкость (Formatted Capacity) представляет собой объем хранимой полезной информации — то есть сумму полей данных всех доступных секторов. Неформатированная емкость (Unformatted Capacity) представляет собой максимальное количество бит, записываемых на всех треках диска, включая и служебную информацию (заголовки секторов, контрольные коды полей данных). Соотношение форматированной и неформатированной емкости определяется форматом трека (размером сектора), но, поскольку для рядового пользователя свободы выбора формата нет, практический интерес представляет только форматированная емкость диска, которая указывается для стандартного размера сектора (512 байт). Напомним, что мегабайт — это больше, чем миллион байт, а гигабайт — больше чем миллиард, поэтому вольности в применении этих единиц могут приводить в недоумение.
                    Интерфейс (Interface) определяет способ подключения накопителя. Для накопителей со встроенным контроллером распространены интерфейсы ATA, он же IDE и SCSI. Из накопителей с внешним контроллером в настоящее время актуальны только НГМД со своим собственным интерфейсом.
                    Быстродействие и производительность характеризуется следующими параметрами:
                    Внутренняя скорость передачи данных (Internal Transfer Rate), измеряемая в количестве бит (мегабит) в секунду, передаваемых между носителем и буферной памятью контроллера, задает физический предел производительности накопителя. Здесь сознательно объем передаваемой информации измеряют в битах, а не байтах: из длинной цепочки бит сектора «полезными» являются только байты поля данных, а остальные — «накладные расходы». Так что получать среднюю скорость передачи полезной информации (Кбайт/с) простым делением внутренней скорости на 8 (число бит в байте) некорректно. Для НГМД скорость обмена составляет  500 Кбит/с для дискет 1,2 и 1,44 Мбайт. У современных винчестеров средней производительности скорость передачи составляет 60—80 Мбит/с, а у  высокоскоростных  приближается к 200 Мбит/с.
                    Внешняя скорость передачи данных (External Transfer Rate), измеряемая в количестве килобайт (мегабайт) полезных данных в секунду, передаваемых по шине внешнего интерфейса, зависит от быстродействия электроники контроллера, типа интерфейсной шины и режима обмена. Для интерфейса АТА в режиме обмена  Ultra-DMA — 33 Мбайт/с, 66 Мбайт/с и 100 Мбайт/с. Для шин SCSI ограничения скорости в зависимости от типа электрического интерфейса составляют 5, 10, 20 или 40 Мбайт/с, а для оптического канала и 100 Мбайт/с. Рядом с внешней скоростью обычно указывают и объем внутренней кэш-памяти, а также особенности ее организации (многосегментность, адаптивность). По характеристикам кэша можно судить о том, в какой степени может быть интересна внешняя скорость.
                    Время перехода на соседний трек (Track-to-Track Seek), измеряемое в миллисекундах, характеризует быстродействие системы позиционирования Для современных жестких дисков характерно время перехода в 0,8~2 мс, причем для записи оно несколько больше, чем для считывания (записывать лучше при более точном позиционировании).
                    Среднее время поиска (Average Seek Time) определяется по смеси обращений к случайным цилиндрам и для современных жестких дисков составляет около 8-10 мс. Чем больше объем накопителя, тем больше и время поиска, большее число головок труднее быстро перемещать; большее число цилиндров или увеличивает длину перемещения головок, или повышает требования к точности позиционирования.
                    Максимальное время поиска (Maximum Seek Time) примерно в два раза превышает среднее и относится к самым дальним переходам между крайними цилиндрами.
                    Скорость вращения шпинделя (Spindle Speed), измеряемая в оборотах в минуту (RPM — Rotates Per Minutes), позволяет косвенно судить о производительности (внутренней скорости). Для жестких дисков значение 5400 об/мин является обычной, 7200 — высокой скоростью.
                    Среднее ожидание сектора при одиночном обращении (Average Latency) обычно составляет половину времени полного оборота . Новейшие контроллеры ухитряются уменьшить это значение чуть ли не до нуля (Zero Latency), начиная считывание всего трека сразу после позиционирования (не дожидаясь команды).
                    Программы, определяющие производительность накопителей, сознательно или неумышленно могут измерять различные параметры производительности. Если программа измеряет время передачи данных, находящихся в кэш-буфере контроллера, она покажет внешнюю скорость (предел возможности интерфейса или накопителя). Этот результат можно получить при зацикленном чтении блока данных, размер которого заведомо меньше объема кэш-памяти. Заставить программу достоверно измерить внутреннюю скорость затруднительно — для этого нужно ухитриться исключить влияние как буферизации, так и процесса поиска. Интерес представляет длительно выдерживаемая скорость передачи данных (Sustained Transfer Rate), на которую влияют все составляющие: внутренняя и внешняя скорости, время позиционирования, задержка подхода сектора, количество ошибок позиционирования и чтения. Минимальное гарантированное значение этой скорости определяет возможность применения накопителя для мультимедийных приложений реального времени.
                    К параметрам организации и конфигурации относятся следующие:
                    Количество физических дисков (Disks) или рабочих поверхностей (Data Surfaces), используемых для хранения данных. Современные накопители с небольшой высотой имеют малое (1-2) количество дисков для облегчения блока головок.
                    Количество физических головок чтения-записи (Read/Write Heads), естественно, совпадающее с числом рабочих поверхностей.
                    Физическое количество цилиндров (Cylinders) - нескольких сотен.
                    Размер сектора (Bytes Per sector) обычно составляет 512 байт.
                    Для дисков со встроенными контроллерами АТА физическая организация маскируется логической конфигурацией (геометрией) — числом логических цилиндров, головок и секторов (Logical Cylynders, Heads, Sectors). Эти параметры могут отличаться от физической организации, важно лишь, чтобы общее число секторов, полученное перемножением этих трех логических параметров, не превышало числа секторов, физически существующих на всех рабочих поверхностях накопителя.
                    Надежность устройства (Reliability) и достоверность хранения данных (Data Integrity) характеризуются следующими параметрами:
                    Ожидаемое время до отказа МTBF(Меап Time Before Failure), измеряемое в сотнях тысяч часов, является, естественно, среднестатистическим показателем для данного изделия. Реально столько часов (100 000 часов — это более 10 лет) испытания проводить, естественно, невозможно. На самом деле делается выборка из большой группы устройств, из которых за вполне обозримое время испытаний какая-то часть выйдет из строя. По зафиксированному потоку отказов теория вероятностей позволяет вычислить это условное ожидаемое время безотказной работы. Значение MTBF, равное 100 000 часов, считается малым; 200 000-400 000 часов — нормальным, а 1 000 000 часов — высоким показателем надежности.
                    Более ценным для пользователя является гарантийный срок (Limited Warranty), в течение которого изготовитель (или поставщик) обеспечивает ремонт или замену отказавшего устройства. Примечательно, что даже при MTBF=800000 часов (91 год) изготовитель дает гарантию всего на 3-5 лет.
                    Вероятность неисправимых ошибок чтения (Nonrecoverable Read Errors per Bits Read) для современных винчестеров имеет порядок одной ошибки на 1014 считанных бит.
                    Вероятность исправимых ошибок (Recoverable Read Errors per Bits Read) имеет порядок единицы на 1011 считанных бит.
                    Вероятность ошибок поиска (Seek Errors per seek) характеризует качество сервосистемы. Для современных винчестеров характерна вероятность одной ошибки на 10 операций поиска. Эти ошибки (при малом их числе) вполне безобидны, поскольку наличие номера цилиндра в заголовке каждого сектора не позволяет «промахнуться» при выполнении операций чтения или записи. Повторение операции поиски только слегка снижает среднее время доступа.
                    Физические параметры включают ширину (Width), высоту (Heigth) и глубину (Depth) корпуса накопителя, измеряемые в дюймах (inches) или миллиметрах, и массу (Weight), измеряемую в фунтах или килограммах.
                    Потребляемая мощность определяется номинальными и пиковыми токами, потребляемыми по цепям +5 В и +12 В.
                    Условия эксплуатации и хранения определяют возможные диапазоны температур, атмосферного давления, влажности и силы допустимых ударов. Вполне понятно, что условия эксплуатации (Operating Conditions) несколько жестче, чем условия хранения (Non-Operating Conditions).

                    <p><input type="submit" name="1" value="Отправить на проверку"></p>
                </form>

            </div>
        </div>
    </section>



    <div class="footer-area bg-dark text-gray">
        <!-- popular posts block -->
        <footer id="page-footer" class="font-lato">
            <div class="container">
                <div class="row holder">
                    <div class="col-xs-12 col-sm-push-6 col-sm-6">
                        <ul class="socail-networks list-unstyled">
                            <li><a href="#"><span class="fab fa-facebook"></span></a></li>
                            <li><a href="#"><span class="fab fa-twitter"></span></a></li>
                            <li><a href="#"><span class="fab fa-instagram"></span></a></li>
                            <li><a href="#"><span class="fab fa-linkedin"></span></a></li>
                        </ul>
                    </div>
                    <div class="col-xs-12 col-sm-pull-6 col-sm-6">
                        <p><a href="#">Studylms</a> | &copy; 2018 <a href="#">DesignFalls</a>, All rights reserved</p>
                    </div>
                </div>
            </div>
        </footer>
    </div>
</div>
<!-- include jQuery -->
<script src="resources/js/jquery.js"></script>
<!-- include jQuery -->
<script src="resources/js/plugins.js"></script>
<!-- include jQuery -->
<script src="resources/js/jquery.main.js"></script>
<!-- include jQuery -->
<script type="text/javascript" src="resources/js/init.js"></script>

</body>
</html>

